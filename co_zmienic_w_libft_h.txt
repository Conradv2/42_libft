ft_memcpy poprawic unsigned char *_source na const unsigned char *_source aby uniknąć
nieporozumien HAHAH
ZROBIONE


ft_memmove jest popierdolone z tym warunkiem dest < source || dest >= source + num -> no overlapping 
chuj wie o co chodzi

ft_putchar_fd error_handling dla result == -1
ft_putendl_fd sprawdzic czy s == NULL i zrobic po prostu return
ft_putbnr_fd dodac case dla n == 0 ewentualnie
ft_putstr_fd dodac case dla s == NULL 
NIC NIE ZMIENIAC


ft_striteri int i zamienic na unsigned int i ewentualnie i sprawdzic na starcie czy s == NULL i return nic po prostu
ZROBIONE ale nie s == NULL

ft_strjoin zrobic checka s1 i s2 przed rozpoczeciem uzywania ft_strlen ale po inicjacji zmiennych
oraz zmienic malloca -> + 1 *sizeof(char) zamenic na (+ 1) * sizeof(char) tak zeby uniknąć zle zaalokowanej pamieci
ZRIOBIONE

ft_strlcat zobaczyc jeszcze raz
ft_strlcpy zobaczyc jeszcze raz bo te dwie funkcje są tak confusing ze jasny chuj xddd

ft_strlen ewentualnie dodac sprawdzanie str == NULL 
NIE TRZEBA


ft_strmapi ewentualnie dac ft_strlen(s) do osobnej zmiennej zeby nie wywowylac tej funkcji za kazdym razem
ZROBIONE

ft_strncmp dodac ewentualnie n == 0 i return 0 zeby nie robic nie potrzebnego porownywania i w while dac i < n && str1[i] == str2[i]
zamiast poprzedniej wartosci i dodac i == n return (0) -> po porownaniu stringi sa takie same

ft_strnstr sprawdzic jeszcze raz
ft_strrchr ewentualnie zrobic found = NULL zeby od razu zostal zaninicjalizowany wskaźnik a nie
czekac do konca z przypisaniem, albo po prostu go wypierdolic

ft_substr sprawdzic w while kondycje czy i < ft_strlen(s) jest konieczne -> bo raczej nie jest
ZROBIONE


//ft_memmove 
//ft_strlcat i ft_strlcpy
//ft_strncmp
//ft_strnstr
//ft_strrchr